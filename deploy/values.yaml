# If you want to externally generate or template the configuration below, you can use this field to specify a different ConfigMap to use instead.
configMap: ""
config:
  # Configure the frontend routes at which to display the custom views onto metrics
  routes:
    dashboard:
      queries:
      # Queries to run that will be put into the context of the template
      - name: 'single'
        query: 'sum(go_gc_duration_seconds_count)'
      - name: 'all'
        query: 'prometheus_http_request_duration_seconds_sum'
      # Somewhat similar to the Prometheus metric exposition format
      template: |
        {{- range $query := . }}
        {{- range $response := $query.Response -}}
        # {{ $query.Name }}
        {{ $response.Metric }} {{ $response.Value }}
        {{ end }}
        {{ end }}
    other:
      queries:
      - name: 'single'
        query: 'prometheus_http_request_duration_seconds_sum'
      template: |
        {{- range $query := . }}
        {{- range $response := $query.Response -}}
        # {{ $response.Metric }}
        {{ $query.Name }} {{ $response.Value }}
        {{ end }}
        {{ end }}
  # Configure the connection to the backend Prometheus
  prometheus:
    url: http://localhost:9091
  # How stale responses to the queries are allowed to be
  responseExpiryTime: 5s

replicaCount: 1

image:
  repository: sbaier1/prometheus-view-proxy
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: latest

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
